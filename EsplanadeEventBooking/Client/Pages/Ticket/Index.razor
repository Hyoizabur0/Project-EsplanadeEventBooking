@page "/tickets/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Tickets</h3>
<br />

<a href="/tickets/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Ticket
</a>
<br />
<br />

@if (Tickets == null)
{
    <div class="alert alert-info">Loading Tickets...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Event</th>
                <th>Seat</th>
                <th>VIP</th>
                <th>User</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in Tickets)
                {
                }
        </tbody>
    </table>
}

@code {
    private List<Ticket> Tickets;
    private IList<Euser> Eusers;
    private IList<Bookevent> Bookevents;

    protected async override Task OnInitializedAsync()
    {
        Tickets = await _client.GetFromJsonAsync<List<Ticket>>($"{Endpoints.TicketsEndpoint}");
    }

    async Task Delete(int ticketId)
    {
        var ticket = Tickets.First(q => q.Id == ticketId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {ticket.RowNo}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.TicketsEndpoint}/{ticketId}");
            await OnInitializedAsync();
        }
    }
}
